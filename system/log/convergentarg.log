	Tokenizing file...
	Parsing tokens...
	Adding propositions to CAES
	Adding assumptions to CAES
	Adding arguments to CAES
Added argument 'arg1' to graph by 'None'
Added proposition 'issue' to graph with state None
Added proposition '-issue' to graph with state None
Added proposition 'support 1' to graph with state None
Added argument 'arg2' to graph by 'None'
Proposition 'issue' is already in graph
Proposition '-issue' is already in graph
Added proposition 'support 2' to graph with state None
Added argument 'arg4' to graph by 'None'
Proposition 'support 1' is already in graph
Added proposition '-support 1' to graph with state None
Added proposition 'premise1' to graph with state None
Added argument 'arg5' to graph by 'None'
Proposition 'support 2' is already in graph
Added proposition '-support 2' to graph with state None
Added proposition 'premise2' to graph with state None
	Adding parameter to CAES
	Adding proofstandard to CAES
	Adding issues to CAES
	alpha:0.4, beta:0.3, gamme:0.3
	propliterals: {'p1': premise1, 'p2': premise2, 'i': issue, 's1': support 1, 's2': support 2} 
	arguments:['[support 1], ~[] => issue', '[support 2], ~[] => issue', '[premise1], ~[] => support 1', '[premise2], ~[] => support 2'] 
	weights : {arg1: 0.5, arg2: 0.5, arg4: 0.2, arg5: 0.2}
	assumptions: {premise2, premise1} 
	issues: {issue} 
	proofstandard: []
Dialogue Mode: On
********************************************************************************
ISSUE 0: "issue"
********************************************************************************
Calling dialogue(issue)
Added argument 'arg2' to graph by 'PROPONENT'
Added proposition 'issue' to graph with state claimed
Added proposition '-issue' to graph with state None
Added proposition 'support 2' to graph with state None

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 2], ~[] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 2], ~[] => issue'] 
      Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise2, premise1}
Current premises: {support 2}
        Calling acceptable(support 2)
Checking whether proposition 'support 2' meets proof standard 'scintilla'.
          Calling meets_proof_standard(support 2, scintilla)
	arguments:[] 
          meets_proof_standard(support 2, scintilla)-->False
        acceptable(support 2)-->False
      applicable([support 2], ~[] => issue)-->False
    meets_proof_standard(issue, scintilla)-->False
  acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

  Calling burden_met(issue, [support 2], ~[] => issue)
Checking burden of proof for PROPONENT
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 2], ~[] => issue'] 
        Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise2, premise1}
Current premises: {support 2}
          Calling acceptable(support 2)
Checking whether proposition 'support 2' meets proof standard 'scintilla'.
            Calling meets_proof_standard(support 2, scintilla)
	arguments:[] 
            meets_proof_standard(support 2, scintilla)-->False
          acceptable(support 2)-->False
        applicable([support 2], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
Burden of Proof: False
Current Premise: "support 2"
Adding arguments for "support 2"
Added argument 'arg5' to graph by 'PROPONENT'
Proposition 'support 2' is already in graph
Added proposition '-support 2' to graph with state None
Added proposition 'premise2' to graph with state None
proposition "support 2" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 2], ~[] => issue
[premise2], ~[] => support 2
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 2], ~[] => issue'] 
        Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise2, premise1}
Current premises: {support 2}
          Calling acceptable(support 2)
Checking whether proposition 'support 2' meets proof standard 'scintilla'.
            Calling meets_proof_standard(support 2, scintilla)
	arguments:['[premise2], ~[] => support 2'] 
              Calling applicable([premise2], ~[] => support 2)
Checking applicability of arg5...
Current assumptions: {premise2, premise1}
Current premises: {premise2}
              applicable([premise2], ~[] => support 2)-->True
            meets_proof_standard(support 2, scintilla)-->True
          acceptable(support 2)-->True
        applicable([support 2], ~[] => issue)-->True
      meets_proof_standard(issue, scintilla)-->True
    acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

    Calling burden_met(issue, [premise2], ~[] => support 2)
Checking burden of proof for PROPONENT
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 2], ~[] => issue'] 
          Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise2, premise1}
Current premises: {support 2}
            Calling acceptable(support 2)
Checking whether proposition 'support 2' meets proof standard 'scintilla'.
              Calling meets_proof_standard(support 2, scintilla)
	arguments:['[premise2], ~[] => support 2'] 
                Calling applicable([premise2], ~[] => support 2)
Checking applicability of arg5...
Current assumptions: {premise2, premise1}
Current premises: {premise2}
                applicable([premise2], ~[] => support 2)-->True
              meets_proof_standard(support 2, scintilla)-->True
            acceptable(support 2)-->True
          applicable([support 2], ~[] => issue)-->True
        meets_proof_standard(issue, scintilla)-->True
      acceptable(issue)-->True
Burden of Proof: True
    burden_met(issue, [premise2], ~[] => support 2)-->True

  burden_met(issue, [support 2], ~[] => issue)-->True

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 2], ~[] => issue
[premise2], ~[] => support 2
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 2], ~[] => issue'] 
      Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise2, premise1}
Current premises: {support 2}
        Calling acceptable(support 2)
Checking whether proposition 'support 2' meets proof standard 'scintilla'.
          Calling meets_proof_standard(support 2, scintilla)
	arguments:['[premise2], ~[] => support 2'] 
            Calling applicable([premise2], ~[] => support 2)
Checking applicability of arg5...
Current assumptions: {premise2, premise1}
Current premises: {premise2}
            applicable([premise2], ~[] => support 2)-->True
          meets_proof_standard(support 2, scintilla)-->True
        acceptable(support 2)-->True
      applicable([support 2], ~[] => issue)-->True
    meets_proof_standard(issue, scintilla)-->True
  acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

turn_num 1
USING ALGORITHM 2 TO FIND ARGUMENTS
  Calling defeat_issue(issue)
find arguments to defeat issue "issue"
arg: [support 2], ~[] => issue
args_to_consider: ['[premise2], ~[] => support 2']
arg: [premise2], ~[] => support 2
args_to_consider: []
No arguments found to attack the issue issue
  defeat_issue(issue)-->False
dialogue(issue)-->True



********************************************************************************DIALOGUE SUMMARY:
********************************************************************************
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 2], ~[] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 2], ~[] => issue
[premise2], ~[] => support 2
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> True
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 2], ~[] => issue
[premise2], ~[] => support 2
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
		ISSUE "issue" acceptable? -> True
============================================
********************************************************************************
