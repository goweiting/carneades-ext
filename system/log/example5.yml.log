	Tokenizing file...
	Parsing tokens...
	Adding propositions to CAES
	Adding assumptions to CAES
	Adding arguments to CAES
Added argument 'arg1' to graph by claimer 'None'
Added proposition 'issue' to graph with state None
Added proposition '-issue' to graph with state None
Added proposition 'support 1' to graph with state None
Added proposition 'negative 1' to graph with state None
Added argument 'arg2' to graph by claimer 'None'
Proposition 'issue' is already in graph
Proposition '-issue' is already in graph
Added proposition 'support 2' to graph with state None
Added argument 'arg3' to graph by claimer 'None'
Proposition 'support 1' is already in graph
Added proposition '-support 1' to graph with state None
Added proposition 'premise1' to graph with state None
Added argument 'arg4' to graph by claimer 'None'
Proposition 'support 2' is already in graph
Added proposition '-support 2' to graph with state None
Added proposition 'premise2' to graph with state None
Added argument 'defeat arg1' to graph by claimer 'None'
Proposition 'negative 1' is already in graph
Added proposition '-negative 1' to graph with state None
Added proposition 'premise3' to graph with state None
	Adding parameter to CAES
	Adding proofstandard to CAES
	Adding issues to CAES
********************************************************************************
ISSUE: "issue"
********************************************************************************
Added argument 'arg1' to graph by claimer 'PROPONENT'
Added proposition 'issue' to graph with state claimed
Added proposition '-issue' to graph with state None
Added proposition 'support 1' to graph with state None
Added proposition 'negative 1' to graph with state None
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 1], ~[negative 1] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
============================================
Checking burden of proof for PROPONENT
Calling acceptable(issue)
Checking whether proposition 'issue'meets proof standard 'scintilla'.
  Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 1], ~[negative 1] => issue'] 
    Calling applicable([support 1], ~[negative 1] => issue)
Checking applicability of arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 1}
      Calling acceptable(support 1)
Checking whether proposition 'support 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 1, scintilla)
	arguments:[] 
        meets_proof_standard(support 1, scintilla)-->False
      acceptable(support 1)-->False
Current exception: {negative 1}
      Calling acceptable(negative 1)
Checking whether proposition 'negative 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(negative 1, scintilla)
	arguments:[] 
        meets_proof_standard(negative 1, scintilla)-->False
      acceptable(negative 1)-->False
    applicable([support 1], ~[negative 1] => issue)-->False
  meets_proof_standard(issue, scintilla)-->False
acceptable(issue)-->False
Added argument 'arg3' to graph by claimer 'PROPONENT'
Proposition 'support 1' is already in graph
Added proposition '-support 1' to graph with state None
Added proposition 'premise1' to graph with state None
proposition "support 1" state updated to claimed
Checking burden of proof for PROPONENT
Calling acceptable(issue)
Checking whether proposition 'issue'meets proof standard 'scintilla'.
  Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 1], ~[negative 1] => issue'] 
    Calling applicable([support 1], ~[negative 1] => issue)
Checking applicability of arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 1}
      Calling acceptable(support 1)
Checking whether proposition 'support 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 1, scintilla)
	arguments:['[premise1], ~[] => support 1'] 
          Calling applicable([premise1], ~[] => support 1)
Checking applicability of arg3...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise1}
          applicable([premise1], ~[] => support 1)-->True
        meets_proof_standard(support 1, scintilla)-->True
      acceptable(support 1)-->True
Current exception: {negative 1}
      Calling acceptable(negative 1)
Checking whether proposition 'negative 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(negative 1, scintilla)
	arguments:[] 
        meets_proof_standard(negative 1, scintilla)-->False
      acceptable(negative 1)-->False
    applicable([support 1], ~[negative 1] => issue)-->True
  meets_proof_standard(issue, scintilla)-->True
acceptable(issue)-->True
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 1], ~[negative 1] => issue
[premise1], ~[] => support 1
-----------------------------------------
Burden of proof met by PROPONENT : True
============================================
proposition "issue" state updated to questioned
SUB ISSUE: "negative 1"
Added argument 'defeat arg1' to graph by claimer 'RESPONDENT'
Proposition 'negative 1' is already in graph
Added proposition '-negative 1' to graph with state None
Added proposition 'premise3' to graph with state None
================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[support 1], ~[negative 1] => issue
[premise1], ~[] => support 1
[premise3], ~[] => negative 1
-----------------------------------------
Burden of proof met by RESPONDENT : ?
============================================
Checking burden of proof for RESPONDENT
Calling acceptable(negative 1)
Checking whether proposition 'negative 1'meets proof standard 'scintilla'.
  Calling meets_proof_standard(negative 1, scintilla)
	arguments:['[premise3], ~[] => negative 1'] 
    Calling applicable([premise3], ~[] => negative 1)
Checking applicability of defeat arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise3}
    applicable([premise3], ~[] => negative 1)-->True
  meets_proof_standard(negative 1, scintilla)-->True
acceptable(negative 1)-->True
================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[support 1], ~[negative 1] => issue
[premise1], ~[] => support 1
[premise3], ~[] => negative 1
-----------------------------------------
Burden of proof met by RESPONDENT : True
============================================
No arguments found by PROPONENT for issue 'negative 1'


Evaluating issue: issue
Calling acceptable(issue)
Checking whether proposition 'issue'meets proof standard 'scintilla'.
  Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 1], ~[negative 1] => issue'] 
    Calling applicable([support 1], ~[negative 1] => issue)
Checking applicability of arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 1}
      Calling acceptable(support 1)
Checking whether proposition 'support 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 1, scintilla)
	arguments:['[premise1], ~[] => support 1'] 
          Calling applicable([premise1], ~[] => support 1)
Checking applicability of arg3...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise1}
          applicable([premise1], ~[] => support 1)-->True
        meets_proof_standard(support 1, scintilla)-->True
      acceptable(support 1)-->True
Current exception: {negative 1}
      Calling acceptable(negative 1)
Checking whether proposition 'negative 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(negative 1, scintilla)
	arguments:['[premise3], ~[] => negative 1'] 
          Calling applicable([premise3], ~[] => negative 1)
Checking applicability of defeat arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise3}
          applicable([premise3], ~[] => negative 1)-->True
        meets_proof_standard(negative 1, scintilla)-->True
      acceptable(negative 1)-->True
    applicable([support 1], ~[negative 1] => issue)-->False
  meets_proof_standard(issue, scintilla)-->False
acceptable(issue)-->False
------ issue IS NOT acceptable ------
Added argument 'arg2' to graph by claimer 'PROPONENT'
Proposition 'issue' is already in graph
Proposition '-issue' is already in graph
Added proposition 'support 2' to graph with state None
================== turn 2 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 1], ~[negative 1] => issue
[premise1], ~[] => support 1
[premise3], ~[] => negative 1
[support 2], ~[] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
============================================
Checking burden of proof for PROPONENT
Calling acceptable(issue)
Checking whether proposition 'issue'meets proof standard 'scintilla'.
  Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 1], ~[negative 1] => issue', '[support 2], ~[] => issue'] 
    Calling applicable([support 1], ~[negative 1] => issue)
Checking applicability of arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 1}
      Calling acceptable(support 1)
Checking whether proposition 'support 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 1, scintilla)
	arguments:['[premise1], ~[] => support 1'] 
          Calling applicable([premise1], ~[] => support 1)
Checking applicability of arg3...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise1}
          applicable([premise1], ~[] => support 1)-->True
        meets_proof_standard(support 1, scintilla)-->True
      acceptable(support 1)-->True
Current exception: {negative 1}
      Calling acceptable(negative 1)
Checking whether proposition 'negative 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(negative 1, scintilla)
	arguments:['[premise3], ~[] => negative 1'] 
          Calling applicable([premise3], ~[] => negative 1)
Checking applicability of defeat arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise3}
          applicable([premise3], ~[] => negative 1)-->True
        meets_proof_standard(negative 1, scintilla)-->True
      acceptable(negative 1)-->True
    applicable([support 1], ~[negative 1] => issue)-->False
    Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 2}
      Calling acceptable(support 2)
Checking whether proposition 'support 2'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 2, scintilla)
	arguments:[] 
        meets_proof_standard(support 2, scintilla)-->False
      acceptable(support 2)-->False
    applicable([support 2], ~[] => issue)-->False
  meets_proof_standard(issue, scintilla)-->False
acceptable(issue)-->False
Added argument 'arg4' to graph by claimer 'PROPONENT'
Proposition 'support 2' is already in graph
Added proposition '-support 2' to graph with state None
Added proposition 'premise2' to graph with state None
proposition "support 2" state updated to claimed
Checking burden of proof for PROPONENT
Calling acceptable(issue)
Checking whether proposition 'issue'meets proof standard 'scintilla'.
  Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 1], ~[negative 1] => issue', '[support 2], ~[] => issue'] 
    Calling applicable([support 1], ~[negative 1] => issue)
Checking applicability of arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 1}
      Calling acceptable(support 1)
Checking whether proposition 'support 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 1, scintilla)
	arguments:['[premise1], ~[] => support 1'] 
          Calling applicable([premise1], ~[] => support 1)
Checking applicability of arg3...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise1}
          applicable([premise1], ~[] => support 1)-->True
        meets_proof_standard(support 1, scintilla)-->True
      acceptable(support 1)-->True
Current exception: {negative 1}
      Calling acceptable(negative 1)
Checking whether proposition 'negative 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(negative 1, scintilla)
	arguments:['[premise3], ~[] => negative 1'] 
          Calling applicable([premise3], ~[] => negative 1)
Checking applicability of defeat arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise3}
          applicable([premise3], ~[] => negative 1)-->True
        meets_proof_standard(negative 1, scintilla)-->True
      acceptable(negative 1)-->True
    applicable([support 1], ~[negative 1] => issue)-->False
    Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 2}
      Calling acceptable(support 2)
Checking whether proposition 'support 2'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 2, scintilla)
	arguments:['[premise2], ~[] => support 2'] 
          Calling applicable([premise2], ~[] => support 2)
Checking applicability of arg4...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise2}
          applicable([premise2], ~[] => support 2)-->True
        meets_proof_standard(support 2, scintilla)-->True
      acceptable(support 2)-->True
    applicable([support 2], ~[] => issue)-->True
  meets_proof_standard(issue, scintilla)-->True
acceptable(issue)-->True
================== turn 2 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[support 1], ~[negative 1] => issue
[premise1], ~[] => support 1
[premise3], ~[] => negative 1
[support 2], ~[] => issue
[premise2], ~[] => support 2
-----------------------------------------
Burden of proof met by PROPONENT : True
============================================
No arguments found by RESPONDENT for issue 'issue'


Evaluating issue: issue
Calling acceptable(issue)
Checking whether proposition 'issue'meets proof standard 'scintilla'.
  Calling meets_proof_standard(issue, scintilla)
	arguments:['[support 1], ~[negative 1] => issue', '[support 2], ~[] => issue'] 
    Calling applicable([support 1], ~[negative 1] => issue)
Checking applicability of arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 1}
      Calling acceptable(support 1)
Checking whether proposition 'support 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 1, scintilla)
	arguments:['[premise1], ~[] => support 1'] 
          Calling applicable([premise1], ~[] => support 1)
Checking applicability of arg3...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise1}
          applicable([premise1], ~[] => support 1)-->True
        meets_proof_standard(support 1, scintilla)-->True
      acceptable(support 1)-->True
Current exception: {negative 1}
      Calling acceptable(negative 1)
Checking whether proposition 'negative 1'meets proof standard 'scintilla'.
        Calling meets_proof_standard(negative 1, scintilla)
	arguments:['[premise3], ~[] => negative 1'] 
          Calling applicable([premise3], ~[] => negative 1)
Checking applicability of defeat arg1...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise3}
          applicable([premise3], ~[] => negative 1)-->True
        meets_proof_standard(negative 1, scintilla)-->True
      acceptable(negative 1)-->True
    applicable([support 1], ~[negative 1] => issue)-->False
    Calling applicable([support 2], ~[] => issue)
Checking applicability of arg2...
Current assumptions: {premise3, premise1, premise2}
Current premises: {support 2}
      Calling acceptable(support 2)
Checking whether proposition 'support 2'meets proof standard 'scintilla'.
        Calling meets_proof_standard(support 2, scintilla)
	arguments:['[premise2], ~[] => support 2'] 
          Calling applicable([premise2], ~[] => support 2)
Checking applicability of arg4...
Current assumptions: {premise3, premise1, premise2}
Current premises: {premise2}
          applicable([premise2], ~[] => support 2)-->True
        meets_proof_standard(support 2, scintilla)-->True
      acceptable(support 2)-->True
    applicable([support 2], ~[] => issue)-->True
  meets_proof_standard(issue, scintilla)-->True
acceptable(issue)-->True
------ issue IS acceptable ------
