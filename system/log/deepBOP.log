	Tokenizing file...
	Parsing tokens...
	Adding propositions to CAES
	Adding assumptions to CAES
	Adding arguments to CAES
Added argument 'arg0' to graph by 'None'
Added proposition 'issue' to graph with state None
Added proposition '-issue' to graph with state None
Added proposition 's1' to graph with state None
Added argument 'arg1' to graph by 'None'
Proposition 's1' is already in graph
Added proposition '-s1' to graph with state None
Added proposition 's11' to graph with state None
Added proposition 's12' to graph with state None
Added argument 'arg2' to graph by 'None'
Proposition 's12' is already in graph
Added proposition '-s12' to graph with state None
Added proposition 'p12' to graph with state None
Added argument 'arg3' to graph by 'None'
Proposition 's11' is already in graph
Added proposition '-s11' to graph with state None
Added proposition 's111' to graph with state None
Added argument 'arg4' to graph by 'None'
Proposition 's111' is already in graph
Added proposition '-s111' to graph with state None
Added proposition 's1111' to graph with state None
Added argument 'arg5' to graph by 'None'
Proposition 's1111' is already in graph
Added proposition '-s1111' to graph with state None
Added proposition 'p1111' to graph with state None
	Adding parameter to CAES
	Adding proofstandard to CAES
	Adding issues to CAES
	alpha:0.4, beta:0.3, gamme:0.3
	propliterals: {'p1111': p1111, 'i': issue, 's11': s11, 's12': s12, 's1': s1, 's1111': s1111, 'p12': p12, 'p1': p1, 's111': s111} 
	arguments:['[s1111], ~[] => s111', '[s111], ~[] => s11', '[s1], ~[] => issue', '[p1111], ~[] => s1111', '[p12], ~[] => s12', '[s11], ~[s12] => s1'] 
	weights : {arg4: 0.2, arg3: 0.1, arg0: 0.5, arg5: 0.3, arg2: 0.1, arg1: 0.2}
	assumptions: {p1111, p12, p1} 
	issues: {issue} 
	proofstandard: []
Dialogue Mode: On
********************************************************************************
ISSUE 0: "issue"
********************************************************************************
Calling dialogue(issue)
Added argument 'arg0' to graph by 'PROPONENT'
Added proposition 'issue' to graph with state claimed
Added proposition '-issue' to graph with state None
Added proposition 's1' to graph with state None

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
      Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
        Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
          Calling meets_proof_standard(s1, scintilla)
	arguments:[] 
          meets_proof_standard(s1, scintilla)-->False
        acceptable(s1)-->False
      applicable([s1], ~[] => issue)-->False
    meets_proof_standard(issue, scintilla)-->False
  acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

  Calling burden_met(issue, [s1], ~[] => issue)
Checking burden of proof for PROPONENT
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
        Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
          Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
            Calling meets_proof_standard(s1, scintilla)
	arguments:[] 
            meets_proof_standard(s1, scintilla)-->False
          acceptable(s1)-->False
        applicable([s1], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
Burden of Proof: False
Current Premise: "s1"
Adding arguments for "s1"
Added argument 'arg1' to graph by 'PROPONENT'
Proposition 's1' is already in graph
Added proposition '-s1' to graph with state None
Added proposition 's11' to graph with state None
Added proposition 's12' to graph with state None
proposition "s1" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
        Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
          Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
            Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
              Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s11, scintilla)
	arguments:[] 
                  meets_proof_standard(s11, scintilla)-->False
                acceptable(s11)-->False
Current exception: {s12}
                Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                  meets_proof_standard(s12, scintilla)-->False
                acceptable(s12)-->False
              applicable([s11], ~[s12] => s1)-->False
            meets_proof_standard(s1, scintilla)-->False
          acceptable(s1)-->False
        applicable([s1], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

    Calling burden_met(issue, [s11], ~[s12] => s1)
Checking burden of proof for PROPONENT
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
          Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
            Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
              Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
                Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                  Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(s11, scintilla)
	arguments:[] 
                    meets_proof_standard(s11, scintilla)-->False
                  acceptable(s11)-->False
Current exception: {s12}
                  Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                    meets_proof_standard(s12, scintilla)-->False
                  acceptable(s12)-->False
                applicable([s11], ~[s12] => s1)-->False
              meets_proof_standard(s1, scintilla)-->False
            acceptable(s1)-->False
          applicable([s1], ~[] => issue)-->False
        meets_proof_standard(issue, scintilla)-->False
      acceptable(issue)-->False
Burden of Proof: False
Current Premise: "s11"
Adding arguments for "s11"
Added argument 'arg3' to graph by 'PROPONENT'
Proposition 's11' is already in graph
Added proposition '-s11' to graph with state None
Added proposition 's111' to graph with state None
proposition "s11" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
          Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
            Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
              Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
                Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                  Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                      Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                        Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                          Calling meets_proof_standard(s111, scintilla)
	arguments:[] 
                          meets_proof_standard(s111, scintilla)-->False
                        acceptable(s111)-->False
                      applicable([s111], ~[] => s11)-->False
                    meets_proof_standard(s11, scintilla)-->False
                  acceptable(s11)-->False
Current exception: {s12}
                  Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                    meets_proof_standard(s12, scintilla)-->False
                  acceptable(s12)-->False
                applicable([s11], ~[s12] => s1)-->False
              meets_proof_standard(s1, scintilla)-->False
            acceptable(s1)-->False
          applicable([s1], ~[] => issue)-->False
        meets_proof_standard(issue, scintilla)-->False
      acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

      Calling burden_met(issue, [s111], ~[] => s11)
Checking burden of proof for PROPONENT
        Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
          Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
            Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
              Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
                  Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                    Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                        Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                          Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                            Calling meets_proof_standard(s111, scintilla)
	arguments:[] 
                            meets_proof_standard(s111, scintilla)-->False
                          acceptable(s111)-->False
                        applicable([s111], ~[] => s11)-->False
                      meets_proof_standard(s11, scintilla)-->False
                    acceptable(s11)-->False
Current exception: {s12}
                    Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                      meets_proof_standard(s12, scintilla)-->False
                    acceptable(s12)-->False
                  applicable([s11], ~[s12] => s1)-->False
                meets_proof_standard(s1, scintilla)-->False
              acceptable(s1)-->False
            applicable([s1], ~[] => issue)-->False
          meets_proof_standard(issue, scintilla)-->False
        acceptable(issue)-->False
Burden of Proof: False
Current Premise: "s111"
Adding arguments for "s111"
Added argument 'arg4' to graph by 'PROPONENT'
Proposition 's111' is already in graph
Added proposition '-s111' to graph with state None
Added proposition 's1111' to graph with state None
proposition "s111" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
        Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
          Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
            Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
              Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
                  Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                    Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                        Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                          Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                            Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                              Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                                Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                                  Calling meets_proof_standard(s1111, scintilla)
	arguments:[] 
                                  meets_proof_standard(s1111, scintilla)-->False
                                acceptable(s1111)-->False
                              applicable([s1111], ~[] => s111)-->False
                            meets_proof_standard(s111, scintilla)-->False
                          acceptable(s111)-->False
                        applicable([s111], ~[] => s11)-->False
                      meets_proof_standard(s11, scintilla)-->False
                    acceptable(s11)-->False
Current exception: {s12}
                    Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                      meets_proof_standard(s12, scintilla)-->False
                    acceptable(s12)-->False
                  applicable([s11], ~[s12] => s1)-->False
                meets_proof_standard(s1, scintilla)-->False
              acceptable(s1)-->False
            applicable([s1], ~[] => issue)-->False
          meets_proof_standard(issue, scintilla)-->False
        acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

        Calling burden_met(issue, [s1111], ~[] => s111)
Checking burden of proof for PROPONENT
          Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
            Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
              Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
                Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
                    Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                      Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                          Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                            Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                              Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                                Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                                  Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                                    Calling meets_proof_standard(s1111, scintilla)
	arguments:[] 
                                    meets_proof_standard(s1111, scintilla)-->False
                                  acceptable(s1111)-->False
                                applicable([s1111], ~[] => s111)-->False
                              meets_proof_standard(s111, scintilla)-->False
                            acceptable(s111)-->False
                          applicable([s111], ~[] => s11)-->False
                        meets_proof_standard(s11, scintilla)-->False
                      acceptable(s11)-->False
Current exception: {s12}
                      Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                        meets_proof_standard(s12, scintilla)-->False
                      acceptable(s12)-->False
                    applicable([s11], ~[s12] => s1)-->False
                  meets_proof_standard(s1, scintilla)-->False
                acceptable(s1)-->False
              applicable([s1], ~[] => issue)-->False
            meets_proof_standard(issue, scintilla)-->False
          acceptable(issue)-->False
Burden of Proof: False
Current Premise: "s1111"
Adding arguments for "s1111"
Added argument 'arg5' to graph by 'PROPONENT'
Proposition 's1111' is already in graph
Added proposition '-s1111' to graph with state None
Added proposition 'p1111' to graph with state None
proposition "s1111" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
          Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
            Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
              Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
                Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
                    Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                      Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                          Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                            Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                              Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                                Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                                  Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                                    Calling meets_proof_standard(s1111, scintilla)
	arguments:['[p1111], ~[] => s1111'] 
                                      Calling applicable([p1111], ~[] => s1111)
Checking applicability of arg5...
Current assumptions: {p1111, p12, p1}
Current premises: {p1111}
                                      applicable([p1111], ~[] => s1111)-->True
                                    meets_proof_standard(s1111, scintilla)-->True
                                  acceptable(s1111)-->True
                                applicable([s1111], ~[] => s111)-->True
                              meets_proof_standard(s111, scintilla)-->True
                            acceptable(s111)-->True
                          applicable([s111], ~[] => s11)-->True
                        meets_proof_standard(s11, scintilla)-->True
                      acceptable(s11)-->True
Current exception: {s12}
                      Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                        meets_proof_standard(s12, scintilla)-->False
                      acceptable(s12)-->False
                    applicable([s11], ~[s12] => s1)-->True
                  meets_proof_standard(s1, scintilla)-->True
                acceptable(s1)-->True
              applicable([s1], ~[] => issue)-->True
            meets_proof_standard(issue, scintilla)-->True
          acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

          Calling burden_met(issue, [p1111], ~[] => s1111)
Checking burden of proof for PROPONENT
            Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
              Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
                Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
                  Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
                      Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                        Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                          Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                            Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                              Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                                Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                                  Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                                    Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                                      Calling meets_proof_standard(s1111, scintilla)
	arguments:['[p1111], ~[] => s1111'] 
                                        Calling applicable([p1111], ~[] => s1111)
Checking applicability of arg5...
Current assumptions: {p1111, p12, p1}
Current premises: {p1111}
                                        applicable([p1111], ~[] => s1111)-->True
                                      meets_proof_standard(s1111, scintilla)-->True
                                    acceptable(s1111)-->True
                                  applicable([s1111], ~[] => s111)-->True
                                meets_proof_standard(s111, scintilla)-->True
                              acceptable(s111)-->True
                            applicable([s111], ~[] => s11)-->True
                          meets_proof_standard(s11, scintilla)-->True
                        acceptable(s11)-->True
Current exception: {s12}
                        Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                          Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                          meets_proof_standard(s12, scintilla)-->False
                        acceptable(s12)-->False
                      applicable([s11], ~[s12] => s1)-->True
                    meets_proof_standard(s1, scintilla)-->True
                  acceptable(s1)-->True
                applicable([s1], ~[] => issue)-->True
              meets_proof_standard(issue, scintilla)-->True
            acceptable(issue)-->True
Burden of Proof: True
          burden_met(issue, [p1111], ~[] => s1111)-->True

        burden_met(issue, [s1111], ~[] => s111)-->True

      burden_met(issue, [s111], ~[] => s11)-->True

    burden_met(issue, [s11], ~[s12] => s1)-->True

  burden_met(issue, [s1], ~[] => issue)-->True

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
      Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
        Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
          Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
            Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
              Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                  Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                    Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                        Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                          Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                            Calling meets_proof_standard(s1111, scintilla)
	arguments:['[p1111], ~[] => s1111'] 
                              Calling applicable([p1111], ~[] => s1111)
Checking applicability of arg5...
Current assumptions: {p1111, p12, p1}
Current premises: {p1111}
                              applicable([p1111], ~[] => s1111)-->True
                            meets_proof_standard(s1111, scintilla)-->True
                          acceptable(s1111)-->True
                        applicable([s1111], ~[] => s111)-->True
                      meets_proof_standard(s111, scintilla)-->True
                    acceptable(s111)-->True
                  applicable([s111], ~[] => s11)-->True
                meets_proof_standard(s11, scintilla)-->True
              acceptable(s11)-->True
Current exception: {s12}
              Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s12, scintilla)
	arguments:[] 
                meets_proof_standard(s12, scintilla)-->False
              acceptable(s12)-->False
            applicable([s11], ~[s12] => s1)-->True
          meets_proof_standard(s1, scintilla)-->True
        acceptable(s1)-->True
      applicable([s1], ~[] => issue)-->True
    meets_proof_standard(issue, scintilla)-->True
  acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

turn_num 1
USING ALGORITHM 1 TO FIND ARGUMENTS
  Calling find_args_to_exceptions(issue)
find_args_to_exceptions in "issue"
arg: [s1], ~[] => issue
exceptions []
args_to_consider: ['[s11], ~[s12] => s1']
arg: [s11], ~[s12] => s1
exceptions ['[p12], ~[] => s12']
proposition "s12" state updated to "questioned"
Found an argument to prove the exception
  find_args_to_exceptions(issue)-->[p12], ~[] => s12
  Calling dialogue(s12)
Added argument 'arg2' to graph by 'RESPONDENT'
Proposition 's12' is already in graph
Added proposition '-s12' to graph with state None
Added proposition 'p12' to graph with state None

================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
[p12], ~[] => s12
-----------------------------------------
Burden of proof met by RESPONDENT : ?
-----------------------------------------
proofstandard: []
Evaluating issue: "s12"
    Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
      Calling meets_proof_standard(s12, scintilla)
	arguments:['[p12], ~[] => s12'] 
        Calling applicable([p12], ~[] => s12)
Checking applicability of arg2...
Current assumptions: {p1111, p12, p1}
Current premises: {p12}
        applicable([p12], ~[] => s12)-->True
      meets_proof_standard(s12, scintilla)-->True
    acceptable(s12)-->True
------ "s12" IS acceptable ------
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
        Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
          Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
            Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
              Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                    Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                      Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                          Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                            Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                              Calling meets_proof_standard(s1111, scintilla)
	arguments:['[p1111], ~[] => s1111'] 
                                Calling applicable([p1111], ~[] => s1111)
Checking applicability of arg5...
Current assumptions: {p1111, p12, p1}
Current premises: {p1111}
                                applicable([p1111], ~[] => s1111)-->True
                              meets_proof_standard(s1111, scintilla)-->True
                            acceptable(s1111)-->True
                          applicable([s1111], ~[] => s111)-->True
                        meets_proof_standard(s111, scintilla)-->True
                      acceptable(s111)-->True
                    applicable([s111], ~[] => s11)-->True
                  meets_proof_standard(s11, scintilla)-->True
                acceptable(s11)-->True
Current exception: {s12}
                Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s12, scintilla)
	arguments:['[p12], ~[] => s12'] 
                    Calling applicable([p12], ~[] => s12)
Checking applicability of arg2...
Current assumptions: {p1111, p12, p1}
Current premises: {p12}
                    applicable([p12], ~[] => s12)-->True
                  meets_proof_standard(s12, scintilla)-->True
                acceptable(s12)-->True
              applicable([s11], ~[s12] => s1)-->False
            meets_proof_standard(s1, scintilla)-->False
          acceptable(s1)-->False
        applicable([s1], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

    Calling burden_met(s12, [p12], ~[] => s12)
Checking burden of proof for RESPONDENT
      Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
        Calling meets_proof_standard(s12, scintilla)
	arguments:['[p12], ~[] => s12'] 
          Calling applicable([p12], ~[] => s12)
Checking applicability of arg2...
Current assumptions: {p1111, p12, p1}
Current premises: {p12}
          applicable([p12], ~[] => s12)-->True
        meets_proof_standard(s12, scintilla)-->True
      acceptable(s12)-->True
Burden of Proof: True
    burden_met(s12, [p12], ~[] => s12)-->True

================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
[p12], ~[] => s12
-----------------------------------------
Burden of proof met by RESPONDENT : True
-----------------------------------------
proofstandard: []
Evaluating issue: "s12"
    Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
      Calling meets_proof_standard(s12, scintilla)
	arguments:['[p12], ~[] => s12'] 
        Calling applicable([p12], ~[] => s12)
Checking applicability of arg2...
Current assumptions: {p1111, p12, p1}
Current premises: {p12}
        applicable([p12], ~[] => s12)-->True
      meets_proof_standard(s12, scintilla)-->True
    acceptable(s12)-->True
------ "s12" IS acceptable ------
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
        Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
          Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
            Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
              Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
                Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                    Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                      Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                          Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                            Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                              Calling meets_proof_standard(s1111, scintilla)
	arguments:['[p1111], ~[] => s1111'] 
                                Calling applicable([p1111], ~[] => s1111)
Checking applicability of arg5...
Current assumptions: {p1111, p12, p1}
Current premises: {p1111}
                                applicable([p1111], ~[] => s1111)-->True
                              meets_proof_standard(s1111, scintilla)-->True
                            acceptable(s1111)-->True
                          applicable([s1111], ~[] => s111)-->True
                        meets_proof_standard(s111, scintilla)-->True
                      acceptable(s111)-->True
                    applicable([s111], ~[] => s11)-->True
                  meets_proof_standard(s11, scintilla)-->True
                acceptable(s11)-->True
Current exception: {s12}
                Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(s12, scintilla)
	arguments:['[p12], ~[] => s12'] 
                    Calling applicable([p12], ~[] => s12)
Checking applicability of arg2...
Current assumptions: {p1111, p12, p1}
Current premises: {p12}
                    applicable([p12], ~[] => s12)-->True
                  meets_proof_standard(s12, scintilla)-->True
                acceptable(s12)-->True
              applicable([s11], ~[s12] => s1)-->False
            meets_proof_standard(s1, scintilla)-->False
          acceptable(s1)-->False
        applicable([s1], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

turn_num 2
USING ALGORITHM 1 TO FIND ARGUMENTS
    Calling find_args_to_exceptions(s12)
find_args_to_exceptions in "s12"
arg: [p12], ~[] => s12
exceptions []
args_to_consider: []
    find_args_to_exceptions(s12)-->False
No arguments found to satisfy exceptions in issue "s12"
    Calling find_best_con_argument(s12)
find_best_con_argument for "s12"
arg: [p12], ~[] => s12
arg_cons []
args_to_consider: []
    find_best_con_argument(s12)-->False
  dialogue(s12)-->True
<=== issue: issue
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
      Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
        Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
          Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
            Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
              Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                  Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                    Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                        Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                          Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                            Calling meets_proof_standard(s1111, scintilla)
	arguments:['[p1111], ~[] => s1111'] 
                              Calling applicable([p1111], ~[] => s1111)
Checking applicability of arg5...
Current assumptions: {p1111, p12, p1}
Current premises: {p1111}
                              applicable([p1111], ~[] => s1111)-->True
                            meets_proof_standard(s1111, scintilla)-->True
                          acceptable(s1111)-->True
                        applicable([s1111], ~[] => s111)-->True
                      meets_proof_standard(s111, scintilla)-->True
                    acceptable(s111)-->True
                  applicable([s111], ~[] => s11)-->True
                meets_proof_standard(s11, scintilla)-->True
              acceptable(s11)-->True
Current exception: {s12}
              Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s12, scintilla)
	arguments:['[p12], ~[] => s12'] 
                  Calling applicable([p12], ~[] => s12)
Checking applicability of arg2...
Current assumptions: {p1111, p12, p1}
Current premises: {p12}
                  applicable([p12], ~[] => s12)-->True
                meets_proof_standard(s12, scintilla)-->True
              acceptable(s12)-->True
            applicable([s11], ~[s12] => s1)-->False
          meets_proof_standard(s1, scintilla)-->False
        acceptable(s1)-->False
      applicable([s1], ~[] => issue)-->False
    meets_proof_standard(issue, scintilla)-->False
  acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[s1], ~[] => issue'] 
      Calling applicable([s1], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p1111, p12, p1}
Current premises: {s1}
        Calling acceptable(s1)
Checking whether proposition 's1' meets proof standard 'scintilla'.
          Calling meets_proof_standard(s1, scintilla)
	arguments:['[s11], ~[s12] => s1'] 
            Calling applicable([s11], ~[s12] => s1)
Checking applicability of arg1...
Current assumptions: {p1111, p12, p1}
Current premises: {s11}
              Calling acceptable(s11)
Checking whether proposition 's11' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s11, scintilla)
	arguments:['[s111], ~[] => s11'] 
                  Calling applicable([s111], ~[] => s11)
Checking applicability of arg3...
Current assumptions: {p1111, p12, p1}
Current premises: {s111}
                    Calling acceptable(s111)
Checking whether proposition 's111' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(s111, scintilla)
	arguments:['[s1111], ~[] => s111'] 
                        Calling applicable([s1111], ~[] => s111)
Checking applicability of arg4...
Current assumptions: {p1111, p12, p1}
Current premises: {s1111}
                          Calling acceptable(s1111)
Checking whether proposition 's1111' meets proof standard 'scintilla'.
                            Calling meets_proof_standard(s1111, scintilla)
	arguments:['[p1111], ~[] => s1111'] 
                              Calling applicable([p1111], ~[] => s1111)
Checking applicability of arg5...
Current assumptions: {p1111, p12, p1}
Current premises: {p1111}
                              applicable([p1111], ~[] => s1111)-->True
                            meets_proof_standard(s1111, scintilla)-->True
                          acceptable(s1111)-->True
                        applicable([s1111], ~[] => s111)-->True
                      meets_proof_standard(s111, scintilla)-->True
                    acceptable(s111)-->True
                  applicable([s111], ~[] => s11)-->True
                meets_proof_standard(s11, scintilla)-->True
              acceptable(s11)-->True
Current exception: {s12}
              Calling acceptable(s12)
Checking whether proposition 's12' meets proof standard 'scintilla'.
                Calling meets_proof_standard(s12, scintilla)
	arguments:['[p12], ~[] => s12'] 
                  Calling applicable([p12], ~[] => s12)
Checking applicability of arg2...
Current assumptions: {p1111, p12, p1}
Current premises: {p12}
                  applicable([p12], ~[] => s12)-->True
                meets_proof_standard(s12, scintilla)-->True
              acceptable(s12)-->True
            applicable([s11], ~[s12] => s1)-->False
          meets_proof_standard(s1, scintilla)-->False
        acceptable(s1)-->False
      applicable([s1], ~[] => issue)-->False
    meets_proof_standard(issue, scintilla)-->False
  acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
dialogue(issue)-->False



********************************************************************************DIALOGUE SUMMARY:
********************************************************************************
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> True
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
		ISSUE "issue" acceptable? -> True
============================================
================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
[p12], ~[] => s12
-----------------------------------------
Burden of proof met by RESPONDENT : ?
-----------------------------------------
		ISSUE "s12" acceptable? -> True
TOP ISSUE "issue" acceptable? -> False
============================================
================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[s1], ~[] => issue
[s11], ~[s12] => s1
[s111], ~[] => s11
[s1111], ~[] => s111
[p1111], ~[] => s1111
[p12], ~[] => s12
-----------------------------------------
Burden of proof met by RESPONDENT : True
-----------------------------------------
		ISSUE "s12" acceptable? -> True
TOP ISSUE "issue" acceptable? -> False
============================================
********************************************************************************
