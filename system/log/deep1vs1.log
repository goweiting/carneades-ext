	Tokenizing file...
	Parsing tokens...
	Adding propositions to CAES
	Adding assumptions to CAES
	Adding arguments to CAES
Added argument 'arg0' to graph by 'None'
Added proposition 'issue' to graph with state None
Added proposition '-issue' to graph with state None
Added proposition 'p11' to graph with state None
Added proposition 'p12' to graph with state None
Added argument 'arg1' to graph by 'None'
Proposition 'p11' is already in graph
Added proposition '-p11' to graph with state None
Added proposition 'p21' to graph with state None
Added proposition 'e21' to graph with state None
Added argument 'arg2' to graph by 'None'
Proposition 'p21' is already in graph
Added proposition '-p21' to graph with state None
Added proposition 'p31' to graph with state None
Added proposition 'e31' to graph with state None
Added argument 'arg3' to graph by 'None'
Added proposition 'e41' to graph with state None
Added proposition '-e41' to graph with state None
Added proposition 'p60' to graph with state None
Added argument 'arg4' to graph by 'None'
Proposition 'e31' is already in graph
Added proposition '-e31' to graph with state None
Added proposition 'p42' to graph with state None
Proposition 'e41' is already in graph
Added argument 'arg5' to graph by 'None'
Proposition 'p42' is already in graph
Added proposition '-p42' to graph with state None
Added proposition 'p43' to graph with state None
Added argument 'arg6' to graph by 'None'
Added proposition '-p12' to graph with state None
Proposition 'p12' is already in graph
Added proposition 'p44' to graph with state None
Added proposition 'p55' to graph with state None
Added argument 'arg7' to graph by 'None'
Proposition 'p44' is already in graph
Added proposition '-p44' to graph with state None
Added proposition 'p45' to graph with state None
Added argument 'arg8' to graph by 'None'
Proposition 'p12' is already in graph
Proposition '-p12' is already in graph
Added proposition 'p06' to graph with state None
Added argument 'arg9' to graph by 'None'
Proposition 'p55' is already in graph
Added proposition '-p55' to graph with state None
Added proposition 'p50' to graph with state None
	Adding parameter to CAES
	Adding proofstandard to CAES
	Adding issues to CAES
	alpha:0.4, beta:0.3, gamme:0.3
	propliterals: {'e41': e41, 'p12': p12, 'p60': p60, 'p50': p50, 'i': issue, 'p21': p21, 'e21': e21, 'p43': p43, 'p06': p06, 'p55': p55, 'p11': p11, 'p44': p44, 'p45': p45, 'p31': p31, 'e31': e31, 'p42': p42} 
	arguments:['[p43], ~[] => p42', '[p45], ~[] => p44', '[p31], ~[e31] => p21', '[p44], ~[p55] => -p12', '[p11, p12], ~[] => issue', '[p50], ~[] => p55', '[p06], ~[] => p12', '[p60], ~[] => e41', '[p42], ~[e41] => e31', '[p21], ~[e21] => p11'] 
	weights : {arg5: 0.01, arg7: 0.01, arg2: 0.22, arg6: 0.2, arg0: 0.5, arg9: 0.1, arg8: 0.25, arg3: 0.4, arg4: 0.1, arg1: 0.1}
	assumptions: {p50, p43, p60, p06, p31, p45} 
	issues: {issue} 
	proofstandard: [(p11, 'preponderance'), (p12, 'preponderance')]
Dialogue Mode: On
********************************************************************************
ISSUE 0: "issue"
********************************************************************************
Calling dialogue(issue)
Added argument 'arg0' to graph by 'PROPONENT'
Added proposition 'issue' to graph with state claimed
Added proposition '-issue' to graph with state None
Added proposition 'p11' to graph with state None
Added proposition 'p12' to graph with state None

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
proofstandard: []
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
      Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
        Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'scintilla'.
          Calling meets_proof_standard(p12, scintilla)
	arguments:[] 
          meets_proof_standard(p12, scintilla)-->False
        acceptable(p12)-->False
      applicable([p11, p12], ~[] => issue)-->False
    meets_proof_standard(issue, scintilla)-->False
  acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

  Calling burden_met(issue, [p11, p12], ~[] => issue)
Checking burden of proof for PROPONENT
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
        Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
          Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p12, scintilla)
	arguments:[] 
            meets_proof_standard(p12, scintilla)-->False
          acceptable(p12)-->False
        applicable([p11, p12], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
Burden of Proof: False
Current Premise: "p12"
Adding arguments for "p12"
Added argument 'arg8' to graph by 'PROPONENT'
Proposition 'p12' is already in graph
Added proposition '-p12' to graph with state None
Added proposition 'p06' to graph with state None
proposition "p12" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: [(p12, 'preponderance')]
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
        Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
          Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
            Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
              Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
              applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
No applicable arguments in []
            meets_proof_standard(p12, preponderance)-->True
          acceptable(p12)-->True
          Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p11, scintilla)
	arguments:[] 
            meets_proof_standard(p11, scintilla)-->False
          acceptable(p11)-->False
        applicable([p11, p12], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

    Calling burden_met(issue, [p06], ~[] => p12)
Checking burden of proof for PROPONENT
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
          Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
            Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p12, scintilla)
	arguments:['[p06], ~[] => p12'] 
                Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
                applicable([p06], ~[] => p12)-->True
              meets_proof_standard(p12, scintilla)-->True
            acceptable(p12)-->True
            Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p11, scintilla)
	arguments:[] 
              meets_proof_standard(p11, scintilla)-->False
            acceptable(p11)-->False
          applicable([p11, p12], ~[] => issue)-->False
        meets_proof_standard(issue, scintilla)-->False
      acceptable(issue)-->False
Burden of Proof: False
Current Premise: "p06"
    burden_met(issue, [p06], ~[] => p12)-->False

Current Premise: "p11"
Adding arguments for "p11"
Added argument 'arg1' to graph by 'PROPONENT'
Proposition 'p11' is already in graph
Added proposition '-p11' to graph with state None
Added proposition 'p21' to graph with state None
Added proposition 'e21' to graph with state None
proposition "p11" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
        Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
          Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
            Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
              Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
              applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
No applicable arguments in []
            meets_proof_standard(p12, preponderance)-->True
          acceptable(p12)-->True
          Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
            Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
              Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(p21, scintilla)
	arguments:[] 
                  meets_proof_standard(p21, scintilla)-->False
                acceptable(p21)-->False
Current exception: {e21}
                Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                  meets_proof_standard(e21, scintilla)-->False
                acceptable(e21)-->False
              applicable([p21], ~[e21] => p11)-->False
No applicable arguments in [arg1]
No applicable arguments in []
            meets_proof_standard(p11, preponderance)-->False
          acceptable(p11)-->False
        applicable([p11, p12], ~[] => issue)-->False
      meets_proof_standard(issue, scintilla)-->False
    acceptable(issue)-->False
------ "issue" IS NOT acceptable ------
============================================

    Calling burden_met(issue, [p21], ~[e21] => p11)
Checking burden of proof for PROPONENT
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
          Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
            Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p12, scintilla)
	arguments:['[p06], ~[] => p12'] 
                Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
                applicable([p06], ~[] => p12)-->True
              meets_proof_standard(p12, scintilla)-->True
            acceptable(p12)-->True
            Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p11, scintilla)
	arguments:['[p21], ~[e21] => p11'] 
                Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                  Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p21, scintilla)
	arguments:[] 
                    meets_proof_standard(p21, scintilla)-->False
                  acceptable(p21)-->False
Current exception: {e21}
                  Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                    meets_proof_standard(e21, scintilla)-->False
                  acceptable(e21)-->False
                applicable([p21], ~[e21] => p11)-->False
              meets_proof_standard(p11, scintilla)-->False
            acceptable(p11)-->False
          applicable([p11, p12], ~[] => issue)-->False
        meets_proof_standard(issue, scintilla)-->False
      acceptable(issue)-->False
Burden of Proof: False
Current Premise: "p21"
Adding arguments for "p21"
Added argument 'arg2' to graph by 'PROPONENT'
Proposition 'p21' is already in graph
Added proposition '-p21' to graph with state None
Added proposition 'p31' to graph with state None
Added proposition 'e31' to graph with state None
proposition "p21" state updated to "claimed"

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "issue"
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
          Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
            Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
                Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
                applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
No applicable arguments in []
              meets_proof_standard(p12, preponderance)-->True
            acceptable(p12)-->True
            Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
                Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                  Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                      Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                        Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                          Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                          meets_proof_standard(e31, scintilla)-->False
                        acceptable(e31)-->False
                      applicable([p31], ~[e31] => p21)-->True
                    meets_proof_standard(p21, scintilla)-->True
                  acceptable(p21)-->True
Current exception: {e21}
                  Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                    meets_proof_standard(e21, scintilla)-->False
                  acceptable(e21)-->False
                applicable([p21], ~[e21] => p11)-->True
Checking applicability and weights of [arg1]
Weights of [arg1] are [0.1]
No applicable arguments in []
              meets_proof_standard(p11, preponderance)-->True
            acceptable(p11)-->True
          applicable([p11, p12], ~[] => issue)-->True
        meets_proof_standard(issue, scintilla)-->True
      acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

      Calling burden_met(issue, [p31], ~[e31] => p21)
Checking burden of proof for PROPONENT
        Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
          Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
            Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
              Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'scintilla'.
                Calling meets_proof_standard(p12, scintilla)
	arguments:['[p06], ~[] => p12'] 
                  Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
                  applicable([p06], ~[] => p12)-->True
                meets_proof_standard(p12, scintilla)-->True
              acceptable(p12)-->True
              Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'scintilla'.
                Calling meets_proof_standard(p11, scintilla)
	arguments:['[p21], ~[e21] => p11'] 
                  Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                    Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                        Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                          Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                            Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                            meets_proof_standard(e31, scintilla)-->False
                          acceptable(e31)-->False
                        applicable([p31], ~[e31] => p21)-->True
                      meets_proof_standard(p21, scintilla)-->True
                    acceptable(p21)-->True
Current exception: {e21}
                    Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                      meets_proof_standard(e21, scintilla)-->False
                    acceptable(e21)-->False
                  applicable([p21], ~[e21] => p11)-->True
                meets_proof_standard(p11, scintilla)-->True
              acceptable(p11)-->True
            applicable([p11, p12], ~[] => issue)-->True
          meets_proof_standard(issue, scintilla)-->True
        acceptable(issue)-->True
Burden of Proof: True
      burden_met(issue, [p31], ~[e31] => p21)-->True

    burden_met(issue, [p21], ~[e21] => p11)-->True

  burden_met(issue, [p11, p12], ~[] => issue)-->True

================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "issue"
  Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
    Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
      Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
        Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
          Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
            Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
            applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
No applicable arguments in []
          meets_proof_standard(p12, preponderance)-->True
        acceptable(p12)-->True
        Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
          Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
            Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
              Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                  Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                    Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                      Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                      meets_proof_standard(e31, scintilla)-->False
                    acceptable(e31)-->False
                  applicable([p31], ~[e31] => p21)-->True
                meets_proof_standard(p21, scintilla)-->True
              acceptable(p21)-->True
Current exception: {e21}
              Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                meets_proof_standard(e21, scintilla)-->False
              acceptable(e21)-->False
            applicable([p21], ~[e21] => p11)-->True
Checking applicability and weights of [arg1]
Weights of [arg1] are [0.1]
No applicable arguments in []
          meets_proof_standard(p11, preponderance)-->True
        acceptable(p11)-->True
      applicable([p11, p12], ~[] => issue)-->True
    meets_proof_standard(issue, scintilla)-->True
  acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

turn_num 1
USING ALGORITHM 2 TO FIND ARGUMENTS
  Calling defeat_issue(issue)
find arguments to defeat issue "issue"
arg: [p11, p12], ~[] => issue
exceptions []
arg_cons []
args_to_consider: ['[p21], ~[e21] => p11', '[p06], ~[] => p12']
arg: [p06], ~[] => p12
exceptions []
arg_cons ['[p44], ~[p55] => -p12']
proposition "p12" state updated to "questioned"
Found a con argument
  defeat_issue(issue)-->[p44], ~[p55] => -p12
  Calling dialogue(-p12)
Added argument 'arg6' to graph by 'RESPONDENT'
Proposition '-p12' is already in graph
Proposition 'p12' is already in graph
Added proposition 'p44' to graph with state None
Added proposition 'p55' to graph with state None

================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
-----------------------------------------
Burden of proof met by RESPONDENT : ?
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "-p12"
    Calling acceptable(-p12)
Checking whether proposition '-p12' meets proof standard 'scintilla'.
      Calling meets_proof_standard(-p12, scintilla)
	arguments:['[p44], ~[p55] => -p12'] 
        Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
          Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p44, scintilla)
	arguments:[] 
            meets_proof_standard(p44, scintilla)-->False
          acceptable(p44)-->False
Current exception: {p55}
          Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
            meets_proof_standard(p55, scintilla)-->False
          acceptable(p55)-->False
        applicable([p44], ~[p55] => -p12)-->False
      meets_proof_standard(-p12, scintilla)-->False
    acceptable(-p12)-->False
------ "-p12" IS NOT acceptable ------
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
        Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
          Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
            Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
              Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
              applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
              Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
                Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(p44, scintilla)
	arguments:[] 
                  meets_proof_standard(p44, scintilla)-->False
                acceptable(p44)-->False
Current exception: {p55}
                Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
                  meets_proof_standard(p55, scintilla)-->False
                acceptable(p55)-->False
              applicable([p44], ~[p55] => -p12)-->False
No applicable arguments in [arg6]
            meets_proof_standard(p12, preponderance)-->True
          acceptable(p12)-->True
          Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
            Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
              Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                    Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                      Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                        meets_proof_standard(e31, scintilla)-->False
                      acceptable(e31)-->False
                    applicable([p31], ~[e31] => p21)-->True
                  meets_proof_standard(p21, scintilla)-->True
                acceptable(p21)-->True
Current exception: {e21}
                Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                  meets_proof_standard(e21, scintilla)-->False
                acceptable(e21)-->False
              applicable([p21], ~[e21] => p11)-->True
Checking applicability and weights of [arg1]
Weights of [arg1] are [0.1]
No applicable arguments in []
            meets_proof_standard(p11, preponderance)-->True
          acceptable(p11)-->True
        applicable([p11, p12], ~[] => issue)-->True
      meets_proof_standard(issue, scintilla)-->True
    acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

    Calling burden_met(-p12, [p44], ~[p55] => -p12)
Checking burden of proof for RESPONDENT
      Calling acceptable(-p12)
Checking whether proposition '-p12' meets proof standard 'scintilla'.
        Calling meets_proof_standard(-p12, scintilla)
	arguments:['[p44], ~[p55] => -p12'] 
          Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
            Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p44, scintilla)
	arguments:[] 
              meets_proof_standard(p44, scintilla)-->False
            acceptable(p44)-->False
Current exception: {p55}
            Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
              meets_proof_standard(p55, scintilla)-->False
            acceptable(p55)-->False
          applicable([p44], ~[p55] => -p12)-->False
        meets_proof_standard(-p12, scintilla)-->False
      acceptable(-p12)-->False
Burden of Proof: False
Current Premise: "p44"
Adding arguments for "p44"
Added argument 'arg7' to graph by 'RESPONDENT'
Proposition 'p44' is already in graph
Added proposition '-p44' to graph with state None
Added proposition 'p45' to graph with state None
proposition "p44" state updated to "claimed"

================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
-----------------------------------------
Burden of proof met by RESPONDENT : False
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "-p12"
      Calling acceptable(-p12)
Checking whether proposition '-p12' meets proof standard 'scintilla'.
        Calling meets_proof_standard(-p12, scintilla)
	arguments:['[p44], ~[p55] => -p12'] 
          Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
            Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
                Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
                applicable([p45], ~[] => p44)-->True
              meets_proof_standard(p44, scintilla)-->True
            acceptable(p44)-->True
Current exception: {p55}
            Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
              Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
              meets_proof_standard(p55, scintilla)-->False
            acceptable(p55)-->False
          applicable([p44], ~[p55] => -p12)-->True
        meets_proof_standard(-p12, scintilla)-->True
      acceptable(-p12)-->True
------ "-p12" IS acceptable ------
Evaluating issue: "issue"
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
          Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
            Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
                Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
                applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
                Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
                  Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
                      Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
                      applicable([p45], ~[] => p44)-->True
                    meets_proof_standard(p44, scintilla)-->True
                  acceptable(p44)-->True
Current exception: {p55}
                  Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
                    meets_proof_standard(p55, scintilla)-->False
                  acceptable(p55)-->False
                applicable([p44], ~[p55] => -p12)-->True
Checking applicability and weights of [arg6]
Weights of [arg6] are [0.2]
              meets_proof_standard(p12, preponderance)-->True
            acceptable(p12)-->True
            Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
                Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                  Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                      Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                        Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                          Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                          meets_proof_standard(e31, scintilla)-->False
                        acceptable(e31)-->False
                      applicable([p31], ~[e31] => p21)-->True
                    meets_proof_standard(p21, scintilla)-->True
                  acceptable(p21)-->True
Current exception: {e21}
                  Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                    meets_proof_standard(e21, scintilla)-->False
                  acceptable(e21)-->False
                applicable([p21], ~[e21] => p11)-->True
Checking applicability and weights of [arg1]
Weights of [arg1] are [0.1]
No applicable arguments in []
              meets_proof_standard(p11, preponderance)-->True
            acceptable(p11)-->True
          applicable([p11, p12], ~[] => issue)-->True
        meets_proof_standard(issue, scintilla)-->True
      acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

      Calling burden_met(-p12, [p45], ~[] => p44)
Checking burden of proof for RESPONDENT
        Calling acceptable(-p12)
Checking whether proposition '-p12' meets proof standard 'scintilla'.
          Calling meets_proof_standard(-p12, scintilla)
	arguments:['[p44], ~[p55] => -p12'] 
            Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
              Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
                Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
                  Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
                  applicable([p45], ~[] => p44)-->True
                meets_proof_standard(p44, scintilla)-->True
              acceptable(p44)-->True
Current exception: {p55}
              Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
                Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
                meets_proof_standard(p55, scintilla)-->False
              acceptable(p55)-->False
            applicable([p44], ~[p55] => -p12)-->True
          meets_proof_standard(-p12, scintilla)-->True
        acceptable(-p12)-->True
Burden of Proof: True
      burden_met(-p12, [p45], ~[] => p44)-->True

    burden_met(-p12, [p44], ~[p55] => -p12)-->True

================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
-----------------------------------------
Burden of proof met by RESPONDENT : True
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "-p12"
    Calling acceptable(-p12)
Checking whether proposition '-p12' meets proof standard 'scintilla'.
      Calling meets_proof_standard(-p12, scintilla)
	arguments:['[p44], ~[p55] => -p12'] 
        Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
          Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
              Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
              applicable([p45], ~[] => p44)-->True
            meets_proof_standard(p44, scintilla)-->True
          acceptable(p44)-->True
Current exception: {p55}
          Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
            meets_proof_standard(p55, scintilla)-->False
          acceptable(p55)-->False
        applicable([p44], ~[p55] => -p12)-->True
      meets_proof_standard(-p12, scintilla)-->True
    acceptable(-p12)-->True
------ "-p12" IS acceptable ------
Evaluating issue: "issue"
    Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
      Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
        Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
          Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
            Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
              Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
              applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
              Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
                Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
                    Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
                    applicable([p45], ~[] => p44)-->True
                  meets_proof_standard(p44, scintilla)-->True
                acceptable(p44)-->True
Current exception: {p55}
                Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(p55, scintilla)
	arguments:[] 
                  meets_proof_standard(p55, scintilla)-->False
                acceptable(p55)-->False
              applicable([p44], ~[p55] => -p12)-->True
Checking applicability and weights of [arg6]
Weights of [arg6] are [0.2]
            meets_proof_standard(p12, preponderance)-->True
          acceptable(p12)-->True
          Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
            Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
              Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                    Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                      Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                        Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                        meets_proof_standard(e31, scintilla)-->False
                      acceptable(e31)-->False
                    applicable([p31], ~[e31] => p21)-->True
                  meets_proof_standard(p21, scintilla)-->True
                acceptable(p21)-->True
Current exception: {e21}
                Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                  Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                  meets_proof_standard(e21, scintilla)-->False
                acceptable(e21)-->False
              applicable([p21], ~[e21] => p11)-->True
Checking applicability and weights of [arg1]
Weights of [arg1] are [0.1]
No applicable arguments in []
            meets_proof_standard(p11, preponderance)-->True
          acceptable(p11)-->True
        applicable([p11, p12], ~[] => issue)-->True
      meets_proof_standard(issue, scintilla)-->True
    acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

turn_num 2
USING ALGORITHM 2 TO FIND ARGUMENTS
    Calling defeat_issue(-p12)
find arguments to defeat issue "-p12"
arg: [p44], ~[p55] => -p12
exceptions ['[p50], ~[] => p55']
proposition "p55" state updated to "questioned"
Found an argument to prove the exception
    defeat_issue(-p12)-->[p50], ~[] => p55
    Calling dialogue(p55)
Added argument 'arg9' to graph by 'PROPONENT'
Proposition 'p55' is already in graph
Added proposition '-p55' to graph with state None
Added proposition 'p50' to graph with state None

================== turn 2 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
[p50], ~[] => p55
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "p55"
      Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
        Calling meets_proof_standard(p55, scintilla)
	arguments:['[p50], ~[] => p55'] 
          Calling applicable([p50], ~[] => p55)
Checking applicability of arg9...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p50}
          applicable([p50], ~[] => p55)-->True
        meets_proof_standard(p55, scintilla)-->True
      acceptable(p55)-->True
------ "p55" IS acceptable ------
Evaluating issue: "issue"
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
          Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
            Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
                Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
                applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
                Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
                  Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
                      Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
                      applicable([p45], ~[] => p44)-->True
                    meets_proof_standard(p44, scintilla)-->True
                  acceptable(p44)-->True
Current exception: {p55}
                  Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p55, scintilla)
	arguments:['[p50], ~[] => p55'] 
                      Calling applicable([p50], ~[] => p55)
Checking applicability of arg9...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p50}
                      applicable([p50], ~[] => p55)-->True
                    meets_proof_standard(p55, scintilla)-->True
                  acceptable(p55)-->True
                applicable([p44], ~[p55] => -p12)-->False
No applicable arguments in [arg6]
              meets_proof_standard(p12, preponderance)-->True
            acceptable(p12)-->True
            Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
                Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                  Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                      Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                        Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                          Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                          meets_proof_standard(e31, scintilla)-->False
                        acceptable(e31)-->False
                      applicable([p31], ~[e31] => p21)-->True
                    meets_proof_standard(p21, scintilla)-->True
                  acceptable(p21)-->True
Current exception: {e21}
                  Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                    meets_proof_standard(e21, scintilla)-->False
                  acceptable(e21)-->False
                applicable([p21], ~[e21] => p11)-->True
Checking applicability and weights of [arg1]
Weights of [arg1] are [0.1]
No applicable arguments in []
              meets_proof_standard(p11, preponderance)-->True
            acceptable(p11)-->True
          applicable([p11, p12], ~[] => issue)-->True
        meets_proof_standard(issue, scintilla)-->True
      acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

      Calling burden_met(p55, [p50], ~[] => p55)
Checking burden of proof for PROPONENT
        Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
          Calling meets_proof_standard(p55, scintilla)
	arguments:['[p50], ~[] => p55'] 
            Calling applicable([p50], ~[] => p55)
Checking applicability of arg9...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p50}
            applicable([p50], ~[] => p55)-->True
          meets_proof_standard(p55, scintilla)-->True
        acceptable(p55)-->True
Burden of Proof: True
      burden_met(p55, [p50], ~[] => p55)-->True

================== turn 2 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
[p50], ~[] => p55
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
proofstandard: [(p12, 'preponderance'), (p11, 'preponderance')]
Evaluating issue: "p55"
      Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
        Calling meets_proof_standard(p55, scintilla)
	arguments:['[p50], ~[] => p55'] 
          Calling applicable([p50], ~[] => p55)
Checking applicability of arg9...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p50}
          applicable([p50], ~[] => p55)-->True
        meets_proof_standard(p55, scintilla)-->True
      acceptable(p55)-->True
------ "p55" IS acceptable ------
Evaluating issue: "issue"
      Calling acceptable(issue)
Checking whether proposition 'issue' meets proof standard 'scintilla'.
        Calling meets_proof_standard(issue, scintilla)
	arguments:['[p11, p12], ~[] => issue'] 
          Calling applicable([p11, p12], ~[] => issue)
Checking applicability of arg0...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p12, p11}
            Calling acceptable(p12)
Checking whether proposition 'p12' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p12, preponderance)
	arguments:['[p06], ~[] => p12'] 
                Calling applicable([p06], ~[] => p12)
Checking applicability of arg8...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p06}
                applicable([p06], ~[] => p12)-->True
Checking applicability and weights of [arg8]
Weights of [arg8] are [0.25]
                Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
                  Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
                      Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
                      applicable([p45], ~[] => p44)-->True
                    meets_proof_standard(p44, scintilla)-->True
                  acceptable(p44)-->True
Current exception: {p55}
                  Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p55, scintilla)
	arguments:['[p50], ~[] => p55'] 
                      Calling applicable([p50], ~[] => p55)
Checking applicability of arg9...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p50}
                      applicable([p50], ~[] => p55)-->True
                    meets_proof_standard(p55, scintilla)-->True
                  acceptable(p55)-->True
                applicable([p44], ~[p55] => -p12)-->False
No applicable arguments in [arg6]
              meets_proof_standard(p12, preponderance)-->True
            acceptable(p12)-->True
            Calling acceptable(p11)
Checking whether proposition 'p11' meets proof standard 'preponderance'.
              Calling meets_proof_standard(p11, preponderance)
	arguments:['[p21], ~[e21] => p11'] 
                Calling applicable([p21], ~[e21] => p11)
Checking applicability of arg1...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p21}
                  Calling acceptable(p21)
Checking whether proposition 'p21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(p21, scintilla)
	arguments:['[p31], ~[e31] => p21'] 
                      Calling applicable([p31], ~[e31] => p21)
Checking applicability of arg2...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p31}
Current exception: {e31}
                        Calling acceptable(e31)
Checking whether proposition 'e31' meets proof standard 'scintilla'.
                          Calling meets_proof_standard(e31, scintilla)
	arguments:[] 
                          meets_proof_standard(e31, scintilla)-->False
                        acceptable(e31)-->False
                      applicable([p31], ~[e31] => p21)-->True
                    meets_proof_standard(p21, scintilla)-->True
                  acceptable(p21)-->True
Current exception: {e21}
                  Calling acceptable(e21)
Checking whether proposition 'e21' meets proof standard 'scintilla'.
                    Calling meets_proof_standard(e21, scintilla)
	arguments:[] 
                    meets_proof_standard(e21, scintilla)-->False
                  acceptable(e21)-->False
                applicable([p21], ~[e21] => p11)-->True
Checking applicability and weights of [arg1]
Weights of [arg1] are [0.1]
No applicable arguments in []
              meets_proof_standard(p11, preponderance)-->True
            acceptable(p11)-->True
          applicable([p11, p12], ~[] => issue)-->True
        meets_proof_standard(issue, scintilla)-->True
      acceptable(issue)-->True
------ "issue" IS acceptable ------
============================================

turn_num 3
USING ALGORITHM 2 TO FIND ARGUMENTS
      Calling defeat_issue(p55)
find arguments to defeat issue "p55"
arg: [p50], ~[] => p55
exceptions []
arg_cons []
args_to_consider: []
No exceptions or con arguments found for issue "p55"
      defeat_issue(p55)-->False
No arguments found to attack the issue "p55"
    dialogue(p55)-->True
Checking acceptability of issue '-p12'
Evaluating issue: "-p12"
    Calling acceptable(-p12)
Checking whether proposition '-p12' meets proof standard 'scintilla'.
      Calling meets_proof_standard(-p12, scintilla)
	arguments:['[p44], ~[p55] => -p12'] 
        Calling applicable([p44], ~[p55] => -p12)
Checking applicability of arg6...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p44}
          Calling acceptable(p44)
Checking whether proposition 'p44' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p44, scintilla)
	arguments:['[p45], ~[] => p44'] 
              Calling applicable([p45], ~[] => p44)
Checking applicability of arg7...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p45}
              applicable([p45], ~[] => p44)-->True
            meets_proof_standard(p44, scintilla)-->True
          acceptable(p44)-->True
Current exception: {p55}
          Calling acceptable(p55)
Checking whether proposition 'p55' meets proof standard 'scintilla'.
            Calling meets_proof_standard(p55, scintilla)
	arguments:['[p50], ~[] => p55'] 
              Calling applicable([p50], ~[] => p55)
Checking applicability of arg9...
Current assumptions: {p50, p43, p60, p06, p31, p45}
Current premises: {p50}
              applicable([p50], ~[] => p55)-->True
            meets_proof_standard(p55, scintilla)-->True
          acceptable(p55)-->True
        applicable([p44], ~[p55] => -p12)-->False
      meets_proof_standard(-p12, scintilla)-->False
    acceptable(-p12)-->False
------ "-p12" IS NOT acceptable ------
RESPONDENT still have to find more loopholes to attack!
  dialogue(-p12)-->None
BOP not met, finding alternate arguments to prove the issue
dialogue(issue)-->False



********************************************************************************DIALOGUE SUMMARY:
********************************************************************************
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> False
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
-----------------------------------------
Burden of proof met by PROPONENT : False
-----------------------------------------
		ISSUE "issue" acceptable? -> True
============================================
================== turn 0 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
		ISSUE "issue" acceptable? -> True
============================================
================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
-----------------------------------------
Burden of proof met by RESPONDENT : ?
-----------------------------------------
		ISSUE "-p12" acceptable? -> False
TOP ISSUE "issue" acceptable? -> True
============================================
================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
-----------------------------------------
Burden of proof met by RESPONDENT : False
-----------------------------------------
		ISSUE "-p12" acceptable? -> True
TOP ISSUE "issue" acceptable? -> True
============================================
================== turn 1 ==================
BURDEN OF PROOF @ RESPONDENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
-----------------------------------------
Burden of proof met by RESPONDENT : True
-----------------------------------------
		ISSUE "-p12" acceptable? -> True
TOP ISSUE "issue" acceptable? -> True
============================================
================== turn 2 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
[p50], ~[] => p55
-----------------------------------------
Burden of proof met by PROPONENT : ?
-----------------------------------------
		ISSUE "p55" acceptable? -> True
TOP ISSUE "issue" acceptable? -> True
============================================
================== turn 2 ==================
BURDEN OF PROOF @ PROPONENT
ARGUMENTS:
[p11, p12], ~[] => issue
[p06], ~[] => p12
[p21], ~[e21] => p11
[p31], ~[e31] => p21
[p44], ~[p55] => -p12
[p45], ~[] => p44
[p50], ~[] => p55
-----------------------------------------
Burden of proof met by PROPONENT : True
-----------------------------------------
		ISSUE "p55" acceptable? -> True
TOP ISSUE "issue" acceptable? -> True
============================================
********************************************************************************
